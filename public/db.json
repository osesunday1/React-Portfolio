{
    "about":
        {
            "name": "Oseyenbhin Osemeahon",
            "residence": "Canada",
            "province": "Ontario",
            "city": "London, ON",
            "language": ["English", "Turkish"],
            "Hobies": ["Gaming", "Cinematography Enthusiast"],
            "phone": 2263857007,
            "email": "ose.sunday@gmail.com",
            "freelance": "Available",
            "myStory": "I am a passionate programming enthusiast known for my unyielding eagerness and readiness to tackle challenging projects. With a knack for problem-solving and a perpetual curiosity for technological advancements, I thrive in environments that push the boundaries of my programming skills. Beyond my professional pursuits, I have a genuine love for meeting new people and immersing myself in diverse cultures.",
            "frontendSkills": [
                {"name": "REACT", "value": 85}, 
                {"name": "HTML, CSS", "value": 95},  
                { "name": "Javascript", "value" :90}, 
                {"name": "Wordpress", "value": 75},  
                { "name": "Photoshop", "value" :90}],
            "backendSkills": [
                {"name": "Node JS", "value": 80}, 
                {"name": "Django", "value": 75},  
                { "name": "Postgres", "value" :85}, 
                {"name": "Mongo DB", "value": 90}],
            "codingSkills": [ 
                { "name": "Javascript", "value" :85}, 
                {"name": "Python", "value":75},  
                {"name":"PHP", "value": 70}, 
                {"name":"C#", "value": 40}],
            "reactJob": [
                {"name":"Quiz App", "summary":"Interactive React quiz application", "git": "https://github.com/osesunday1/React-Quiz-APP", "url":"https://react-quiz-app-two-eta.vercel.app/" , "description":{"WID": "I developed an interactive React quiz application designed to dynamically fetch questions from a JSON file. The application includes essential features such as timed quizzes, animated feedback based on user performance, and a scoring system that tracks high scores. Additionally, I ensured the application could be deployed on platforms like Vercel by structuring the project appropriately.", "HID": "To create the quiz application, I utilized React's component-based architecture, developing modular and reusable components including the Header, Question, Options, Progress, Timer, and FinishScreen. For managing complex state transitions and actions within the quiz, I employed the useReducer hook, which provided a clean and maintainable state management strategy. The quiz questions were loaded dynamically from a JSON file located in the public directory, allowing easy access and updates without modifying the core application logic. For visual feedback, I integrated Lottie animations, using different animations to represent varying performance levels at the end of the quiz. The application was designed to be responsive, ensuring a consistent user experience across different devices and screen sizes. To prepare the application for deployment on Vercel, I carefully structured file paths and ensured static assets were served from the appropriate locations.", "IMP": "The implementation of animations and a timed quiz mechanism significantly enhanced the user experience, making the application engaging and interactive. The modular design and the use of JSON for question storage made the application scalable and easy to maintain, allowing updates and new features to be added with minimal changes to the codebase. By successfully demonstrating my ability to build, manage, and deploy a full-featured React application, I showcased my practical skills in modern web development, making a strong impression on potential employers. The project also serves as a real-world example of handling asynchronous data fetching, state management, and responsive UI design in a React environment, reflecting the competencies needed for contemporary web development projects."}},
                {"name":"Admin Dashboard", "summary":"Complete and Responsive Ract Admin Dashboard App", "git": "https://github.com/osesunday1/admin-dashboard", "url":"https://admin-dashboard-nine-indol.vercel.app/" , "description":{"WID": "I developed a comprehensive React JS dashboard application designed for enterprise-level use. The application features a range of functionalities that effectively display and manage data. Key aspects of the project include customizing and integrating Material UI components for a polished and user-friendly interface, utilizing Nivo charts to present data in various visual formats, implementing a profile form with validation using Formik, creating a to-do list scheduler using FullCalendar.io, developing an FAQ page with React Material UI Accordion, and displaying team members, invoices, and clients data using the DataGrid component, which includes filtering capabilities.", "HID": "To achieve this, I extensively customized Material UI components to ensure a consistent and visually appealing design across the application. I integrated Nivo charts to display data in multiple formats, providing clear and interactive visual representations. For the profile form, I utilized Formik to handle form validation and management efficiently. The to-do list scheduler was created using FullCalendar.io, allowing users to manage their tasks and events seamlessly. I employed the DataGrid component to list team members, invoices, and clients, adding filtering functionalities to enhance data accessibility. The FAQ page was built using the React Material UI Accordion component to organize and present frequently asked questions in a user-friendly manner. Additionally, I integrated various data handling techniques to ensure smooth data operations and interactions within the application.", "IMP": "The use of Material UI and responsive design principles significantly enhanced the user experience by making the dashboard not only functional but also visually appealing and easy to navigate. The incorporation of Nivo charts enabled users to understand complex data through interactive and informative visualizations. The DataGrid component, with its filtering capabilities, provided users with an efficient way to manage and access critical data. The to-do list scheduler created with FullCalendar.io helped users organize and track their tasks, boosting productivity. The profile form with Formik validation ensured accurate user data entry, enhancing user engagement and data integrity. Finally, the FAQ page with Material UI Accordion offered users quick and easy access to important information, improving the overall user experience."}},
                {"name":"Blog", "summary":"Dynamic Full-Stack MERN Blog App", "git": "https://github.com/osesunday1/React-Blog", "url":"https://osesunday1.github.io/React-Blog/" , "description":{"WID": "In this project, I developed a full-stack blog application that allows users to create, view, and manage blog posts. The application is built using a combination of modern web development technologies. The frontend is implemented using React, which provides a dynamic and responsive user interface, while the backend is powered by Node.js and Express, handling the server-side logic and API endpoints. MongoDB is used as the database to store blog posts, ensuring efficient data management and retrieval. Throughout the development process, I utilized the useFetch custom hook to manage data fetching in React, enhancing code reusability and maintaining a clean codebase.", "HID": "The development process began with setting up the backend server using Node.js and Express. I defined a Mongoose schema to structure the blog data and created various API endpoints to handle CRUD operations (Create, Read, Update, Delete). These endpoints allow the frontend to interact with the backend seamlessly. On the frontend, I created several React components, including a form for creating new blog posts, a list to display authors and their respective blogs, and detailed views for individual blog posts. The useFetch hook was particularly useful in managing asynchronous data fetching, providing a streamlined way to handle loading states and errors.", "IMP": "The impact of this blog application is significant as it provides a platform for users to express their thoughts and share knowledge through blog posts. It offers a user-friendly interface for authors to create and manage their content effortlessly. By implementing this application, I gained valuable experience in full-stack development, particularly in integrating frontend and backend technologies, handling asynchronous operations, and ensuring a smooth user experience. This project not only showcases my technical skills but also demonstrates the potential of modern web technologies in building interactive and efficient web applications."}},
                {"name":"Travel Planner", "summary":"A react JS App to help travelers efficiently plan to-do list", "git": "https://github.com/osesunday1/React-Travel-Planner/tree/main/src", "url":"https://osesunday1.github.io/React-Travel-Planner/" , "description":{"WID": "For this project, I created a travel planner app using React.js, offering users a platform to input items for their trips. These items are then displayed as a checklist, facilitating easy tracking. Users can mark items as packed with a simple click on checkboxes, visually striking them off. Additionally, I implemented features for deleting individual items and a 'clear list' button for swift list resets.", "HID": "To build the frontend, I leveraged React.js and employed state management to dynamically update the checklist as users interacted with it. Event handling captured user actions such as clicking checkboxes and deleting items. Using React hooks and functional components ensured efficient state management and component reusability. Conditional rendering was utilized to display the struck-off effect when an item is packed.", "IMP": "By streamlining the packing process, the app has significantly reduced stress and confusion for users, leading to smoother travel preparations. Offering an organized checklist and intuitive features for marking items as packed and deleting them has enhanced the overall user experience. Users now have the tools to efficiently manage their packing tasks, resulting in more enjoyable and organized journeys."}},
                {"name":"Portfolio", "summary": "My official SPA site using React", "git": "https://github.com/osesunday1/React-Portfolio/tree/master/src", "url":"https://www.oseportfolio.com/",
                "description":{"WID": "I developed a dynamic portfolio app featuring three solid components seamlessly integrated on a single page. The first component serves as a navigation menu, guiding users through the app's functionalities. The second component, positioned in the middle, showcases my image with a convenient link to download my resume. The third component, a placeholder on the right, dynamically renders UI content based on user interaction with the navigation menu. Implementing a smooth slide-in animation using CSS transitions, I ensured a visually appealing user experience. All data, including project details, was served via a JSON file I created to mimic an API, enhancing flexibility and scalability", "HID": "Utilizing React.js, I structured the app into modular components, enhancing code organization and maintainability. The dynamic rendering of UI content was achieved through event handling and conditional rendering, triggered by user clicks on the navigation menu. To address the challenge of displaying project descriptions within a reusable modal, I implemented a solution to dynamically populate the modal content based on user interactions. CSS transitions were employed to animate the slide-in effect, enhancing the overall aesthetic appeal of the app. The JSON file served as a centralized data source, facilitating easy updates and modifications to project details.", "IMP": "The portfolio app provides users with a sleek and intuitive interface to explore my projects and credentials. By incorporating dynamic rendering and smooth animations, the app offers an engaging user experience. Users can easily navigate through project descriptions, view project details on hosted platforms, or access project repositories on GitHub. Leveraging a JSON file for data management enhances flexibility and scalability, allowing for seamless updates and additions to project information. Despite challenges in implementing a reusable modal, the solution enhances code efficiency and usability, contributing to the app's overall functionality and appeal."}} 
               ],
            "education": [
                {"degree": "Professional Diploma", "country": "Canada", "date": "2023-2024", "course": "Web Development and Internet Applications"},
                {"degree": "PhD", "country": "Cyprus", "date": "2017-2020", "course": "Management Information Systems"}, {"degree": "MSc", "country": "Cyprus", "date": "2016-2017", "course": "Management Information Systems"}, {"degree": "BTech", "country": "Nigeria", "date": "2009-2015", "course": "Management Technology"}    ]

        }

    

}